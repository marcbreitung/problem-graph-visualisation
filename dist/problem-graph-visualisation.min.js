var ProblemGraphVisualisation=function(e){function t(i){if(n[i])return n[i].exports;var o=n[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:i})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(1);Object.defineProperty(t,"Level",{enumerable:!0,get:function(){return i.Level}});var o=n(2);Object.defineProperty(t,"Canvas",{enumerable:!0,get:function(){return o.Canvas}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Level=function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=n.nodes,o=n.nodeColor,r=n.lineColor;this.name=t,this.nodes=i,this.nodeColor=o,this.lineColor=r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();t.Canvas=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var n=t.element,i=t.height,o=t.width;this.element=n,this.context=this.element.getContext("2d"),this.levels=[],this.resize({height:i,width:o})}return i(e,[{key:"addLevel",value:function(e){-1===this.levels.indexOf(e)&&this.levels.push(e)}},{key:"resize",value:function(e){var t=e.height,n=e.width;this.element.setAttribute("height",t),this.element.setAttribute("width",n)}},{key:"update",value:function(){var e=this;this.levels.forEach(function(t){e.drawLevel(t)})}},{key:"drawLevel",value:function(e){var t=this;e.nodes.forEach(function(e){t.drawConnections(e)})}},{key:"drawConnections",value:function(e){var t=this;e.connections.forEach(function(n){t.drawLine({
    from: e,
    to: n,
    size: 1,
    color: t.colors.connections
})})}},{key:"drawText",value:function(e, t, n){this.context.font=n+"px Arial",this.context.fillStyle=this.colors.text,this.context.fillText(t,e.position.x-4,e.position.y+4)}},{key:"drawCircle",value:function(e, t, n){this.context.beginPath(),this.context.arc(e.position.x,e.position.y,t,0,2*Math.PI,!1),this.context.fillStyle=n,this.context.fill()}},{key:"drawLine",value:function(e, t, n, i){this.context.beginPath(),this.context.moveTo(e.position.x,e.position.y),this.context.lineTo(t.position.x,t.position.y),this.context.lineWidth=n,this.context.strokeStyle=i,this.context.stroke()}}]),e}()}]);